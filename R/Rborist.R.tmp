
WORK IN PROGRESS


#########################  qeRFrborist()  #################################

qeRFrborist <- function(data,yName,nTree=500,minNodeSize=10,
   mtry=floor(sqrt(ncol(data)))+1,deweightNames=NULL,deweightVal=NULL,
   holdout=floor(min(1000,0.1*nrow(data))),yYesName='')
{
   classif <- is.factor(data[[yName]])
   # in binary Y case, change to 0,1
   ycol <- which(names(data) == yName)
   yvec <- data[,ycol]
   if (is.factor(yvec)) {
      if (length(levels(yvec)) == 2) {
         if (length(yYesName) > 0) {
            whichYes <- which(yvec == yYesName)
            yvec <- as.character(yvec)
            yvec[whichYes] <- '1'
            yvec[-whichYes] <- '0'
            yvec <- as.factor(yvec)
            data[,ycol] <- yvec
         }
      }
   }
   if (!is.null(holdout)) splitData(holdout,data)
   require(Rborist)
   xyc <- getXY(data,yName,xMustNumeric=FALSE,classif=classif)
   frml <- as.formula(paste(yName,'~ .'))
   if (!is.null(deweightNames)) {
      dataNames <- names(data)
      yCol <- which(dataNames == yName)
      xNames <- dataNames[-yCol]
      numX <- length(xNames)
      wts <- rep(1,numX)
      names(wts) <- xNames
      wts[deweightNames] <- deweightVal
      wts <- wts / sum(wts)
      split.select.weights <- wts
   } else split.select.weights <- NULL
   rfrout <- Rborist(frml,data=data,num.trees=nTree,mtry=mtry,
      split.select.weights=split.select.weights,probability=classif,
      min.node.size=minNodeSize)
   rfrout$classNames <- xyc$classNames
   rfrout$classif <- classif
   rfrout$trainRow1 <- getRow1(data,yName)
   rfrout$yYesName <- yYesName
   class(rfrout) <- c('qeRFrborist','Rborist')
   if (!is.null(holdout)) {
      predictHoldout(rfrout)
      rfrout$holdIdxs <- holdIdxs
   }
   rfrout

}

qerfranger <- qeRFranger

predict.qeRFrborist <- function(object,newx) 
{
   class(object) <- 'Rborist'
   if (is.null(object$importance.mode)) object$importance.mode <- 'none'
   classif <- object$classif
   res <- predict(object, newx, type = "response")$predictions
   if (classif) {
       res <- collectForReturn(object,res)
   }
   res
}

